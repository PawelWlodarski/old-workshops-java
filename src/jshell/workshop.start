1) Start with verbose :
    -- JShell -v
    -- jshell --start PRINTING -- all print methods available!
    --   /help
    --   /help intro
    -- "dowcip branzowy JShell"

2) Write System.out.println("hello")
    *) Write "hello" : $8 ==> "hello"  //no semicolon
    *) $8.toUpperCase
    *) /vars
    *) /v
    *) 2+ // ask for finishing
    *) two times tabulator for docs

3) Create Custom method
        void prn(String s){
            System.out.println(s);
        }
    *) /methods
    *) /list
        **) drop 1
        **) /list f
    *) /vars
    *) /types
    *) /env
        || show /env --

    c) /edit 1
        c2) tab completion for commands /list <tab>
        c3) tab completion for commands parameters /list - <tab>
    d)Forward reference
        jshell> void action(Integer i){
                ...> prn(f.apply(i));
                ...> }
                | created method action(Integer), however, it cannot be invoked until variable f is declared
    e) exceptions
        int divide(int a,int b){
           ...> return a/b;
           ...> }

     f) write while-loop
         while(i<7){
           ...> System.out.print(i);
           ...> i++;
           ...> }
     g) imports
        * import datetime
        * Shift+Tab +
        * /imports


     h) History
        /history
        /!
        /id
        /ctrl+r - search

      i) feedback
        /set feedback
            * show with 2+2


4) Declaring Functions
    a) /imports : jest java.util.function.*
    b) create simple function Int=>Int
        Function<Integer,Integer> f=x->x+1
        f.apply(1)
    c) /vars
    d) f.andthen(i->i*2)
    e) IntUnaryOperator f2
    f) ToIntFunction f12
    g) f.andThen(f12) not working
    h) no "andThen" on primitives
    i) IntPredicate + Stream


5) FunctionalInterfaces
    a)  /set editor
        |/set editor gedit -s
        |/set editor subl -wait  //https://bugs.openjdk.java.net/browse/JDK-8158738
        |/set editor -default
    b) declare Runnable
         Runnable r = () -> prn("I'm in run")
    c)declare Executor
        ExecutorService ec=Executors.newSingleThreadExecutor()
    d) submit(r)    , $4.isDone
    e) /edit prn
            void prn(String s){
            	System.out.println(s +" in " + Thread.currentThread().getName());
            }
    f) /vars
    g) Comparator
        Comparator<String> c = (s1,s2) -> s2.length() - s1.length()
        List<String> l = Arrays.asList("aa","ccccccc","d")
        l.sort(c)


5b)
    * own mode : jshell> /set mode mine normal --command
    * /set prompt normal - actual settings
    * /set prompt normal
    * /set prompt mine "jug>" "jug.....>"


6) util.Function
    a) Predicate
       * Predicate<Integer> moreThan5=i->i>5
       * List.of(1,2,3,4,5,6,7,8).stream().filter(moreThan5).collect(Collectors.toList())
          //   $24 ==> [6, 7, 8]
    b)Supplier
       * Supplier<Integer> s = () -> 2;
       * Supplier<Double> d = Math::random
    c)Class
        class User{

        	public final String name="Roman";

        	public User(){
        		System.out.println("in constructor")
        	}
        }
     d)Supplier<User> s = User::new
     e)Function<String,User> s=User::new;
            - toString
     f)Consumer
        Consumer<String> prnt = s->System.out.println(s)
        Consumer<String> prnt2 = System.out::println
        prnt.accept("aaa")
        prnt.accept("aaa")
     i)UnaryOperator,BinaryOperator,BiPredicate,BiConsumer,BiFunction
        UnaryOperator<String> prefix= s-> "aaaaaaaa : "+s
        BinaryOperator<Integer> sum = (i1,i2)->i1+i2
        BiFunction<Integer,Integer,Integer> sum2 = (i1,i2) -> i1+i2
            IntStream.range(1,10).reduce(sum) - WON'T WORK
        IntStream.range(1,10).boxed().reduce(sum)
        IntBinaryOperator sumi = (i1,i2) -> i1+i2
        IntStream.range(1,10).reduce(sumi)
            $49 ==> OptionalInt[45]
7) Java9
    * Collections factory
         * List.of(1,2,3,4,5)
            * show type
         * Set.of(1,2,3,4,5)
            * show exception
         *  Map.of(1,"a",2,"b",3,"c")
            *  $16.entrySet().stream().forEach(prn) <- BiConsumer
    * Stream
        * takeWhile
        * dropWhile
        * iterate
        * ofNullable
    * Default methods and private methods in interfaces
        *  open a script : /open PRINTING <-- explain concept
        * DefaultMethods.jsh
        * DefaultMethods1<String> dm = s->s.length()
            //explain how it helps with backward compatibility
        * private methods in interfaces
            DefaultMethods2<String> dm = String::length
            dm.thenAdd(2).multiplyBy(3).app("aaa")
        * try-with resources
    * Optional and Java9
        * stream
        * ifPresentOrElse
        * or (but not in primitive)
    * /save file.txt


9)Exercises
    *) Stream.of("1","2","3").mapToInt
    *) iterate - fibonacci
    *) flatMap - zip with index

/**
Ctrl+K - Deletes the text from the cursor to the end of the line.

Meta+D - Deletes the text from the cursor to the end of the word.

Ctrl+W - Deletes the text from the cursor to the previous white space.

Ctrl+Y - Pastes the most recently deleted text into the line.

Meta+Y - After Ctrl+Y, Meta+Y cycles through previously deleted text.
**/